#!/bin/sh
#description: piano emulator, based on https://raw.githubusercontent.com/ssshake/console4kids/master/piano
#usage: pianocat

#example:
#echo "D4 F4 - G4 A4 - A#4 A4 G4 - E4 C4 - D4 E4 F4 - D4 D4 - C#4 D4 E4 - C#4 C#4 - D4 F4 - G4 A4 - A#4 A4 G4 - E4 C4 - D4 E4 F4 - E4 D4 C#4 - C#4 D4 - - D4" | pianocat
#echo "T:4/4 L:1/4 D4 F4:2 ! G4 A4:2 ! A#4:.5 A4:.5 G4:2 ! E4 C4:2 ! D4:.5 E4:.5 F4:2 ! D4 D4:2 ! C#4:.5 D4:.5 E4:2 ! C#4 C#4:2 ! D4 F4:2 ! G4 A4:2 ! A#4:.5 A4:.5 G4:2 ! E4 C4:2 ! D4:.5 E4:.5 F4:2 ! E4:.5 D4:.5 C#4:2 ! C#4 D4:2 - D4:4" | pianocat

#TODO 17-03-2015 10:59 >> add support for arpegios "A1~A4~A7"

TITLE="$(printf "%s" \
"_______________________________________________
|  | | | |  |  | | | | | |  |  | | | |  |  | |  |
|  | | | |  |  | | | | | |  |  | | | |  |  | |  |
|  |w| |e|  |  |t| |y| |u|  |  |o| |p|  |  |+|  |
|  |_| |_|  |  |_| |_| |_|  |  |_| |_|  |  |_|  |
|   |   |   |   |   |   |   |   |   |   |   |   |
| a | s | d | f | g | h | j | k | l | Ã± | { | } |
|___|___|___|___|___|___|___|___|___|___|___|___|

Press any key to play, 1..7 to select an octave
   (by default 4) >/< to move the keyboard
               or Esc to exit")"

_usage() {
    printf "%s\\n" "Usage: ${PROGNAME} [options] [file]"
    printf "%s\\n" "A piano emulator."
    printf "\\n"
    printf "%s\\n" "  -b, --beat          beat time in seconds (0.5)"
    printf "%s\\n" "  -s, --sound [s|d]   set method to generate sound (static with fallback to dynamic)"
    printf "%s\\n" "                      by default, ${PROGNAME} will look for wav files or other static"
    printf "%s\\n" "                      files matching the notes played, eg: A4.wav, if no static files"
    printf "%s\\n" "                      are found then it'll use sox to generate the sounds dinamically"
    printf "%s\\n" "  -d, --directory     base directory   (~/.pianocat)"
    printf "%s\\n" "  -c, --collection    collection sound (iowa-steinway-b)"
    printf "%s\\n" "  -f, --format        audio format     (wav)"
    printf "%s\\n" "  -q, --quiet         make interactive console less verbose"
    printf "%s\\n" "  -h, --help          show this help message and exit"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_basename() { #alternative basename portable version, fast but unsafe
    [ -z "${1}" ] && return 1 || _basename__name="${1}" && _basename__retval=""
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="${_basename__name##*/}"
    esac
    [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ] && \
        _basename__name="${_basename__name%$_basename__suffix}"
    _basename__retval="${_basename__name}"
    #printf "%s" "${_basename__name}"
}

_command() {
    if ! command -v "${1}" >/dev/null 2>&1; then
        printf "%s\\n" "install '${1}' to run this program" >&2
        exit 1
    fi
}

_str2upper() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
}

_subchar() { #print n character in string, fast but unsafe
    _subchar__string="${1}"
    i="0"; while [ "${i}" -le "${2}" ]; do
        _subchar__char="${_subchar__string#?}"
        _subchar__char="${_subchar__string%$_subchar__char}"
        i="$(($i+1))"
        _subchar__string="${_subchar__string#?}"
    done
    _subchar__retval="${_subchar__char}"
    #printf "%s\\n" "${_subchar__char}"
}

_substr() { #print a substring
    [ -z "${1}" ] && return 1
    [ -z "${2}" ] && return 1

    if [ "${2}" -lt "0" ]; then
        _substr__start="$((${#1} + ${2}))"
    else
        _substr__start="${2}"
    fi

    if [ -z "${3}" ]; then
        _substr__len="${#1}"
    else
        if [ "${3}" -lt "0" ]; then
            _substr__len="$((${#1} + ${3}))"
        else
            _substr__len="$((${_substr__start} + ${3}))"
        fi
    fi

    _substr__start="$((${_substr__start} + 1))"

    [ "${_substr__start}" -lt "0" ] && return 1
    [ "${_substr__start}" -gt "${_substr__len}" ] && return 1

    printf "%s\\n" "${1}" | cut -c"${_substr__start}"-"${_substr__len}"
}

_sanitize() {
    #remove double empty spaces, new lines and other garbage
    _sanitize__result="$(printf "%s\\n" "${@}" | awk '!/^#/')"
    _sanitize__result="$(printf "%s\\n" "${_sanitize__result}" | tr "\n" " ")"
    _sanitize__result="$(printf "%s\\n" "${_sanitize__result}" | awk '{gsub(/[|;]/, "");print}')"
    _sanitize__result="$(printf "%s\\n" "${_sanitize__result}" | tr  -s  " ")"
    _sanitize__result="${_sanitize__result%% }"; _sanitize__result="${_sanitize__result## }"
    #format stream
    _sanitize__result="$(_str2upper "${_sanitize__result}")"
    printf "%s\\n" "${_sanitize__result}"
}

_strreplace() { #replace param in string
  #[ -n "${2}" ] || return 1
  _strreplace__orig="${1}"
  _strreplace__retval=""
  _strreplace__srch="${2}"
  _strreplace__rep="${3}"
  case "${_strreplace__orig}" in
    *"${_strreplace__srch}"*)
       _strreplace__sr1="${_strreplace__orig%%$_strreplace__srch*}"
       _strreplace__sr2="${_strreplace__orig#*$_strreplace__srch}"
       _strreplace__orig="${_strreplace__sr1}${_strreplace__rep}${_strreplace__sr2}"
       ;;
    *) return 1 ;;
  esac
  _strreplace__retval="${_strreplace__orig}"
  #printf "%s" "${_strreplace__orig}"
}

_float2fraction() {
    [ -z "${1}" ] && return 1 || _float2fraction__retval=""
    _float2fraction__num="${1%%.*}"
    _float2fraction__den="${1##*.}"
    [ "${_float2fraction__num}" ] && [ "${_float2fraction__num}" -eq "0" ] && _float2fraction__num=""
    _float2fraction__num="${_float2fraction__num}${_float2fraction__den}"
    _float2fraction__zero="${#_float2fraction__den}"
    _float2fraction__den="1"
    #checking if denominator or numerator is greater
    while [ "${_float2fraction__zero}" -gt "0" ]; do
        _float2fraction__den="${_float2fraction__den}0"
        _float2fraction__zero="$((${_float2fraction__zero}-1))"
    done
    if [ "${_float2fraction__num}" -gt "${_float2fraction__den}" ];then
       _float2fraction__greater="${_float2fraction__num}"
       _float2fraction__lower="${_float2fraction__den}"
    else
       _float2fraction__greater="${_float2fraction__den}"
       _float2fraction__lower="${_float2fraction__num}"
    fi #finding hcf
    while [ "${_float2fraction__lower}" -ne "0" ];do
        _float2fraction__hcf="${_float2fraction__lower}"
        _float2fraction__lower=$((${_float2fraction__greater}%${_float2fraction__lower}))
        _float2fraction__greater="${_float2fraction__hcf}"
    done #dividing numerator and denominator by hcf
    _float2fraction__num="$((${_float2fraction__num}/${_float2fraction__hcf}))"
    _float2fraction__den="$((${_float2fraction__den}/${_float2fraction__hcf}))"
    _float2fraction__retval="${_float2fraction__num}/${_float2fraction__den}" #answer
    #printf "%s\\n" "${_float2fraction__num}/${_float2fraction__den}"
}

_ascii2int() {
    printf '%d' "'${*}"
}

_readc() {
    [ ! -t 0 ] && _readc__retval="27" && return || _readc__retval=""
    if [ -z "${_readc__init}" ]; then
        stty -echo; stty raw; _readc__init="1"
    fi
    _readc__retval="$(_ascii2int "$(dd bs=1 count=1 2> /dev/null)")"
    if [ -z "${quiet}" ]; then
        stty -raw; stty echo; unset _readc__init
    fi
}

_cleanup() {
    clear      #clear screen
    stty echo  #show input
    tput rmcup #restore terminal view
    stty -raw
}

_key() { #auxiliar to calculate current octave
    #maintain an internal counter, and set differential to _key__retval
    #depending the spaces the keyboard has moved
    #notes="CDEFGAB" => "C4D4E4F4G4A4B4" =>  0
    #notes="BCDEFGA" => "B3C4D4E4F4G4A4" => -1
    #notes="ABCDEFG" => "A3B3C4D4E4F4G4" => -2
    #notes="DEFGABC" => "D4E4F4G4A4B4C5" =>  1
    #notes="EFGABCD" => "E4F4G4A4B4C5D5" =>  2
    #notes="FGABCDE" => "F4G4A4B4C5D5E5" =>  3
    [ -z "${_key__i}" ] && _key__i="0" && _key__retval=""
    case "${1}" in
        '')  ;;
        '-') _key__i="$((${_key__i}-1))" ;;
        '+') _key__i="$((${_key__i}+1))" ;;
        *) case "${_key__i}" in
           -*)
               if [ "${1}" -le "$((6 - ${_key__i}))" ]; then
                   [ "-${1}" -gt "${_key__i}" ] && _key__retval="-1" || _key__retval="0"
               else
                   [ "${1}" -lt "${_key__i}" ]  && _key__retval="2"  || _key__retval="1"
               fi ;;
           0)
               if [ "${1}" -le "$((6 - ${_key__i}))" ]; then
                   [ "${1}" -lt "${_key__i}" ]  && _key__retval="1"  || _key__retval="0"
               else
                   [ "-${1}" -gt "${_key__i}" ] && _key__retval="-2" || _key__retval="1"
               fi ;;
           *)
               if [ "${1}" -le "$((6 - ${_key__i}))" ]; then
                   _key__retval="0"
               else
                   [ "$((${1}+${_key__i}-1))" -gt "12" ]  && _key__retval="2"  || _key__retval="1"
               fi ;;
           esac ;;
    esac
}

_pianocat() {
    case "${sound}" in
        s*) #look for local sounds and use them if available
            if [ -f "${directory}/${collection}/A4.${format}" ]; then
                _pianocat__args="${directory}/${collection}/NOTE.${format}"
            elif [ -f "A4.${format}" ]; then
                _pianocat__args="NOTE.${format}"
            else
                _pianocat__args="-qn synth 2 pluck NOTE"
            fi
            ;;
        d*) _pianocat__args="-qn synth 2 pluck NOTE" ;;
    esac

    tput smcup # save current terminal view
    printf "%s\\n\\n" "${TITLE}"
    printf "%s" "> "

    [ -z "${input}" ] || input="$(_sanitize "${input}")"
    notes="CDEFGAB"; octave="4"; tempo="4/4"; length="1/4"; while :; do
        [ "${quiet}" ] || [ -z "${note}" ] || printf "%s" "> "
        if [ -z "${input}" ]; then
            _readc
            case "${_readc__retval}" in
                #major keys
                119|w) _key  0; _subchar "${notes}" 0; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #C
                101|e) _key  1; _subchar "${notes}" 1; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #D
                116|t) _key  3; _subchar "${notes}" 3; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #F
                121|y) _key  4; _subchar "${notes}" 4; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #G
                117|u) _key  5; _subchar "${notes}" 5; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #A
                111|o) _key  7; _subchar "${notes}" 0; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #C
                112|p) _key  8; _subchar "${notes}" 1; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #D
                43|+)  _key 10; _subchar "${notes}" 3; note="${_subchar__retval}#$((${octave}+${_key__retval}))";; #F

                #normal keys
                97|a)  _key  0; _subchar "${notes}" 0; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #C
                115|s) _key  1; _subchar "${notes}" 1; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #D
                100|d) _key  2; _subchar "${notes}" 2; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #E
                102|f) _key  3; _subchar "${notes}" 3; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #F
                103|g) _key  4; _subchar "${notes}" 4; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #G
                104|h) _key  5; _subchar "${notes}" 5; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #A
                106|j) _key  6; _subchar "${notes}" 6; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #B
                107|k) _key  7; _subchar "${notes}" 0; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #C
                108|l) _key  8; _subchar "${notes}" 1; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #D
             195*|'Ã±') _key  9; _subchar "${notes}" 2; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #E
   327*|325*|326*|'Ã±') _readc ; _key 9; _subchar "${notes}" 2; note="${_subchar__retval}$((${octave}+${_key__retval}))";; #E
              123|'}') _key 10; _subchar "${notes}" 3; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #F
              125|'{') _key 11; _subchar "${notes}" 4; note="${_subchar__retval}$((${octave}+${_key__retval}))" ;; #G

                #change octave
                49|1) octave="1"; note=""; continue;;
                50|2) octave="2"; note=""; continue;;
                51|3) octave="3"; note=""; continue;;
                52|4) octave="4"; note=""; continue;;
                53|5) octave="5"; note=""; continue;;
                54|6) octave="6"; note=""; continue;;
                55|7) octave="7"; note=""; continue;;

                #move piano keys
                62|'>') notes="$(_substr "${notes}" 6 1)$(_substr "${notes}" 0 6)"; _key '-'; note=""; continue;;
                60|'<') notes="$(_substr "${notes}" 1 6)$(_substr "${notes}" 0 1)"; _key '+'; note=""; continue;;

                #Esc
                27|) _cleanup; exit ;;
                *)     note=""; continue;;
            esac
        else
            case "${input}" in
                *' '*)     note="${input%% *}"; input="${input#* }" ;;
                "${note}") [ -z "${quiet}" ] && printf "\\b\\b" && exit 0 ;;
                *)         note="${input%% *}"; input="${note%%:*}" ;;
            esac
            case "${note}" in
                T*)  tempo="${note##*:}";  note=""; continue ;;
                L*)  length="${note##*:}"; note=""; continue ;;
                '|') note=""; continue ;;
                =)   cur_len="${tempo}"   ;;
                -)   cur_len="$(awk "BEGIN {printf \"%.4f\", "${tempo}"/2; exit(0)}")";;
                *:*) cur_len="${note##*:}/${tempo##*/}"; note="${note%%:*}" ;;
                !|*) cur_len="${length}" ;;
            esac
            case "${cur_len}" in
                */*) ;;
                *)   _float2fraction "${cur_len}"; cur_len="${_float2fraction__retval}" ;;
            esac
            printf "tempo: %s, "  "${tempo}"
            printf "length: %s, " "${cur_len}"
        fi

        [ ! "${note}" ] && continue
        if [ -z "${quiet}" ]; then
           [ "${_readc__retval}" ] && printf "%s" "key: '${_readc__retval}', "
            printf "%s\\n" "note: ${note}"
        fi

        case "${note}" in
            *+*) chord="${note}"; while [ "${chord}" ]; do
                     notec="${chord%%+*}"
                     _strreplace "${_pianocat__args}" NOTE "${notec}"
                     play "${_strreplace__retval}" >/dev/null 2>&1 &
                     [ X"${chord}" = X"${notec}" ] && chord='' || chord="${chord#*+}"
                 done ;;
            *~*) ;; #TODO: arpegios
            *)   _strreplace "${_pianocat__args}" NOTE "${note}"
                 play ${_strreplace__retval} >/dev/null 2>&1 & ;;
        esac

        sleep "$(awk "BEGIN {printf \"%.4f\", "${cur_len}" * "${beat}" / (1/${tempo##*/}); exit(0)}" 2>/dev/null)" 2>/dev/null
    done
}

trap _cleanup 1 15
_basename "${0}"; PROGNAME="${_basename__retval}"

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, save it
    input="$(cat)"
fi

for arg in "${@}"; do #parse options
    if [ -f "${arg}" ]; then
        input="$(cat "${arg}")"
    fi

    case "${arg}" in
        -h|--help) _usage && exit ;;
        -q|--quiet) quiet="1" && shift ;;
        '-b'|'--beat')
            if [ "${#}" -gt "1" ]; then
                shift; beat="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -b*) beat="${1#-b}"; shift ;;
        --beat*) beat="${1#--beat}"; shift ;;
        '-s'|'--sound')
            if [ "${#}" -gt "1" ]; then
                shift; sound="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -s*) sound="${1#-s}"; shift ;;
        --sound*) sound="${1#--sound}"; shift ;;
        -sd) sound="dynamic"; shift ;;
        -ss) sound="static" ; shift ;;
        '-d'|'--directory')
            if [ "${#}" -gt "1" ]; then
                shift; directory="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -d*) directory="${1#-d}"; shift ;;
        --directory*) directory="${1#--directory}"; shift ;;
        '-c'|'--collection')
            if [ "${#}" -gt "1" ]; then
                shift; collection="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -c*) collection="${1#-c}"; shift ;;
        --collection*) collection="${1#--collection}"; shift ;;
        -f|--format)
            if [ "${#}" -gt "1" ]; then
                shift; format="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -f*) format="${1#-f}"; shift ;;
        --format*) format="${1#--format}"; shift ;;
        -?*) _die "${PROGNAME}: unrecognized option '${arg}'" ;;
    esac
done

_command "play"
[ -z "${beat}" ]  && beat="0.5"
[ -z "${sound}" ] && sound="static"
[ -z "${directory}" ]  || [ ! -d "${directory}" ] && directory="${HOME}/.pianocat"
[ -z "${collection}" ] || [ ! -d "${directory}/${collection}" ] && collection="iowa-steinway-b"
[ -z "${format}" ] && format="wav"

_pianocat
